{"backend_state":"running","connection_file":"/projects/200e8042-15d9-45b5-b665-c79cbc8761e9/.local/share/jupyter/runtime/kernel-f58ed5b8-8fd6-403c-96c7-00003a4d0d18.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":[],"name":"linear_regression_sklearn_on_own_data.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1659029290966,"exec_count":17,"id":"e955ea","input":"# import libraries \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics","kernel":"python3-ubuntu","metadata":{"id":"IecuRdF1a-sG"},"pos":1,"start":1659029290947,"state":"done","type":"cell"}
{"cell_type":"code","end":1659029293580,"exec_count":18,"id":"50110d","input":"filename = 'https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/insurance.csv'\nmy_data = pd.read_csv(filename) #TODO: read in your file by replacing the filename variable with your file's path. You can also use this current code to work on an automobile dataset! ","kernel":"python3-ubuntu","metadata":{"id":"mBcweiAXW3bC"},"pos":5,"start":1659029293392,"state":"done","type":"cell"}
{"cell_type":"code","end":1659029693196,"exec_count":25,"id":"1e5d80","input":"y_hat2 = poly.predict(x_test)","kernel":"python3-ubuntu","output":{"0":{"ename":"AttributeError","evalue":"'PolynomialFeatures' object has no attribute 'predict'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-25-565572575e10>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0my_hat2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpoly\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'PolynomialFeatures' object has no attribute 'predict'"]}},"pos":28,"start":1659029693148,"state":"done","type":"cell"}
{"cell_type":"code","end":1659029897096,"exec_count":30,"id":"1db22b","input":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n# splitting the data\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n#Create the model object\nlinr = LinearRegression()\n#Fit (train) the model -- this is where the ML happens!\npoly = PolynomialFeatures(degree=3)\nX_ = poly.fit_transform(x_train)\nlinr.fit(X_,y_train)","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jkPf0bt4a-sV","outputId":"99433807-734f-4a07-fe0a-26b3ad2fb709"},"output":{"0":{"data":{"text/plain":"LinearRegression()"},"exec_count":30}},"pos":22,"start":1659029896901,"state":"done","type":"cell"}
{"cell_type":"code","end":1659029948383,"exec_count":31,"id":"d1ca07","input":"# Predicting using SKLearn\nx_test = poly.fit_transform(x_test)\ny_hat = linr.predict(x_test)","kernel":"python3-ubuntu","metadata":{"id":"o9ZDJB1qrJ7_"},"pos":26,"start":1659029948341,"state":"done","type":"cell"}
{"cell_type":"code","end":1659029978754,"exec_count":35,"id":"612438","input":"import plotly.express as px\npx.scatter(x=y_hat2,y=y_test)","kernel":"python3-ubuntu","output":{"0":{"data":{"iframe":"7fad2eec005123606181c36acf8c585bf9e7d397"}}},"pos":37,"start":1659029978494,"state":"done","type":"cell"}
{"cell_type":"code","end":1659030131102,"exec_count":40,"id":"fc77ef","input":"y_test","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"array([ 8688.85885 ,  5708.867   , 11436.73815 , 38746.3551  ,\n        4463.2051  ,  9304.7019  , 38511.6283  ,  2150.469   ,\n        7345.7266  , 10264.4421  , 13415.0381  , 24393.6224  ,\n       37607.5277  , 13063.883   , 24915.04626 ,  8027.968   ,\n        1980.07    , 38709.176   ,  3484.331   ,  3947.4131  ,\n        1880.07    , 20773.62775 ,  9800.8882  , 21082.16    ,\n       55135.40209 ,  3579.8287  , 43896.3763  , 52590.82939 ,\n        9778.3472  , 10736.87075 ,  4347.02335 ,  9048.0273  ,\n        1711.0268  , 12333.828   , 63770.42801 ,  9872.701   ,\n        4687.797   ,  5693.4305  , 21195.818   ,  8233.0975  ,\n        2755.02095 , 19798.05455 , 42124.5153  ,  9964.06    ,\n        9193.8385  ,  3161.454   ,  2217.6012  ,  7337.748   ,\n        4133.64165 ,  6338.0756  ,  4349.462   ,  5757.41345 ,\n       21771.3423  ,  1391.5287  ,  7160.094   ,  7731.4271  ,\n        9957.7216  ,  3594.17085 , 38282.7495  ,  7256.7231  ,\n       10977.2063  ,  5245.2269  , 11187.6567  ,  1708.92575 ,\n       11411.685   , 11729.6795  ,  6079.6715  , 37829.7242  ,\n       16297.846   , 31620.00106 ,  9991.03765 ,  2203.47185 ,\n        6858.4796  ,  3167.45585 , 10796.35025 ,  1728.897   ,\n       12574.049   ,  4889.9995  ,  9182.17    , 30259.99556 ,\n       16796.41194 , 12592.5345  , 12741.16745 , 18806.14547 ,\n       29523.1656  , 12925.886   ,  3645.0894  ,  1719.4363  ,\n        1984.4533  ,  1824.2854  , 13919.8229  , 18765.87545 ,\n        5615.369   ,  1526.312   ,  1743.214   , 43254.41795 ,\n        9504.3103  ,  8232.6388  ,  1674.6323  ,  8604.48365 ,\n       13880.949   , 12363.547   , 23244.7902  , 11264.541   ,\n       39983.42595 ,  1627.28245 , 37701.8768  , 17942.106   ,\n       12269.68865 ,  4746.344   ,  6313.759   , 12222.8983  ,\n        5594.8455  ,  6551.7501  ,  1682.597   ,  1986.9334  ,\n        2710.82855 ,  1135.9407  ,  1837.2819  , 10107.2206  ,\n       44423.803   , 12404.8791  ,  7152.6714  ,  5934.3798  ,\n       28340.18885 ,  6875.961   ,  5080.096   , 13041.921   ,\n       38126.2465  , 48824.45    , 29141.3603  ,  7935.29115 ,\n        2137.6536  , 11085.5868  ,  5972.378   ,  4561.1885  ,\n       42983.4585  , 19594.80965 , 17748.5062  ,  2473.3341  ,\n        5152.134   ,  4564.19145 , 45863.205   , 25517.11363 ,\n        1146.7966  ,  5649.715   , 11326.71487 ,  7626.993   ,\n       42969.8527  , 13555.0049  ,  6571.544   ,  6985.50695 ,\n        4751.07    , 14319.031   ,  6593.5083  , 34439.8559  ,\n       46113.511   ,  9432.9253  ,  8280.6227  ,  8835.26495 ,\n       10923.9332  ,  5458.04645 , 11842.62375 , 12231.6136  ,\n       43578.9394  , 39556.4945  , 10560.4917  , 17085.2676  ,\n        3206.49135 ,  3861.20965 ,  4239.89265 ,  1633.0444  ,\n        4137.5227  , 11833.7823  ,  8310.83915 , 32734.1863  ,\n        2597.779   ,  8283.6807  ,  8428.0693  , 10141.1362  ,\n       14119.62    ,  2855.43755 , 25992.82104 , 11830.6072  ,\n       40003.33225 , 10594.50155 ,  3597.596   ,  3591.48    ,\n        2117.33885 , 38711.      , 17878.90068 , 23887.6627  ,\n       10564.8845  ,  4562.8421  ,  2198.18985 ,  1131.5066  ,\n       39125.33225 , 20177.67113 , 14001.2867  , 15230.32405 ,\n       33750.2918  , 16577.7795  ,  4889.0368  , 20781.48892 ,\n       19933.458   ,  5012.471   ,  7749.1564  ,  7441.501   ,\n        2690.1138  , 41949.2441  , 22478.6     ,  9301.89355 ,\n        4779.6023  ,  7201.70085 , 12629.8967  , 14133.03775 ,\n        2404.7338  ,  6948.7008  ,  8827.2099  ,  2203.73595 ,\n        3213.62205 , 46151.1245  , 46200.9851  , 14988.432   ,\n        9377.9047  , 46889.2612  , 41097.16175 ,  9644.2525  ,\n       34617.84065 ,  4032.2407  , 12981.3457  , 35491.64    ,\n        3877.30425 ,  5979.731   , 11534.87265 ,  8277.523   ,\n       13204.28565 ,  1629.8335  ,  3021.80915 ,  3392.9768  ,\n        3443.064   ,  2699.56835 , 20277.80751 ,  8932.084   ,\n        1632.03625 ,  9566.9909  ,  4391.652   ,  7196.867   ,\n        7323.734819,  8410.04685 ,  2719.27975 , 11658.11505 ,\n       12146.971   , 13607.36875 , 60021.39897 , 13747.87235 ,\n       12029.2867  ,  6113.23105 ,  8059.6791  , 25333.33284 ,\n       37465.34375 , 47055.5321  , 12949.1554  , 13831.1152  ,\n       13887.204   ,  3925.7582  , 47403.88    ,  8534.6718  ])"},"exec_count":40}},"pos":35,"scrolled":true,"start":1659030131048,"state":"done","type":"cell"}
{"cell_type":"code","end":1659030135675,"exec_count":41,"id":"94541f","input":"y_hat","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"array([ 9690.26849943,  4590.82788892, 13743.00328778, 34529.55302159,\n        6747.13752157, 12025.68371576, 44310.78313398,  3231.01464942,\n        8712.39335501, 11827.66132927, 15633.17010136, 30468.41530174,\n       35604.16437896, 12397.39300996, 10805.59365792,  8257.20728104,\n        4788.28328765, 37444.89462027,  2136.35476722,  5247.46277034,\n        2575.27020731, 27740.38786076, 10188.24004319, 28163.75614789,\n       37757.41005996,  8362.58506682, 46011.97536333, 40902.51148068,\n       11259.62626565, 13114.38733313,  5553.42344805, 11541.64248466,\n        3634.88149156, 13082.7517959 , 56956.24125174, 11485.26843699,\n        6386.25656648,  7557.57717346, 20066.39357428,  9709.58214627,\n        5028.21139906, 14741.5892064 , 40899.08985517, 11400.97715963,\n        9622.47760664,  4022.53731424,  4759.85344093,  8311.1272361 ,\n        5960.95499441,  8155.56014223,  5985.34436873,  7860.51785524,\n       24693.16028525,  3478.80620333,  8439.20394251,  9558.166191  ,\n       10742.13074557,  6124.80005576, 37316.06230626,  8875.34375613,\n       12502.79332665,  6352.42284563, 12852.3137801 ,  1816.50757494,\n       10669.53491451, 11251.5709549 ,  8780.73633817, 28981.58863212,\n       22329.94884743, 16858.14874474, 12912.07177456,  4748.6675266 ,\n        7580.4960301 ,  9822.01545012, 11166.96347789,  3800.21993692,\n       10697.60987189,  7066.0503158 , 10747.63421026, 12681.5237514 ,\n        8182.14214974, 12913.89249333, 13254.53590816,  9761.32149176,\n       32378.09676876, 15937.54691023,  3487.7308006 ,  4503.40519055,\n        3675.79341227,  3707.03748421, 18813.09643872, 20690.0430084 ,\n        1069.34802526,  3844.72063892,  3071.61364571, 42549.29889455,\n       11056.37652899,  9701.25789383,  3753.56950402,  8867.57221844,\n       15649.11147666, 15851.93186964, 20801.77148814, 14182.13669193,\n       37785.81579566,  2088.94499923, 36020.25096534, 20850.67140564,\n       14355.27096967,  5023.12077763,  7352.59041725, 13462.88453952,\n        8776.54856373, 11564.71688781,  5386.4463826 ,  4276.44234581,\n        6567.8466709 ,  3329.81341078,  4192.10099432, 11422.88718841,\n       43274.94123949,  5435.24845157,  9659.78901326,  7517.84030968,\n        9292.61206134,  7577.13146989,   431.57437699, 15255.18327704,\n       40715.23849609, 49819.19987068, 33657.41040843, 10299.82339223,\n        3174.4903437 , 12064.04903574,  4733.12239557, 17449.65911351,\n       45919.79204063, 15154.33473934, 24493.28144353,  2951.4125707 ,\n        5266.34594569, 10461.59660866, 52604.79072713, 11603.48217512,\n        3779.78489827,  6953.8276302 ,  6434.69765459,  8571.62295293,\n       43052.53605814, 13306.58813005,  6799.42746567,  6842.52498349,\n        5743.92220426, 14804.56525985,  7289.02961567, 30803.60790512,\n       49933.37041238, 11091.90127064, 10040.94544705, 10406.59780668,\n       12161.68132671,  6472.26675211, 13182.79721099, 13655.43274379,\n       36717.6702438 , 35195.178039  , 13766.19244559, 22536.69182527,\n        4583.92557637,  8008.88677877,  5412.85642212,  1581.66406185,\n        5048.01548871, 15009.29408234,  9612.7577915 ,  8387.44234184,\n        4125.85097031, 10020.0414292 , 10765.18510045, 11364.90903243,\n       16765.96164047,  3246.26201107, 13086.61885846, 13473.04708419,\n       35816.69458399, 12163.85145807,  4842.77778969,  4255.71422838,\n        3577.05113677, 38755.00870577,  5266.82949717, 22467.87279482,\n       11955.63094535,  5710.34355958,  4677.92298947,  2825.73560655,\n       36347.45935197,  4589.22568809, 17568.86971262, 18216.61568656,\n       27116.25052339, 17789.22006459,  5789.27505541, 12107.97829543,\n       27469.44875793,  5697.04692661,  9331.92173004,  8318.31388153,\n        3165.57079814, 41663.60918768, 27318.96184665,  9959.19966865,\n        5872.63729452,  8142.92425185, 15475.3189487 ,  1789.62300545,\n        2849.37104296,  8856.69736389, 10492.7704366 ,  4757.41412486,\n        4613.86772517, 48420.71536698, 49498.74488105, 16891.5550396 ,\n       11585.80578922, 42776.15183013, 38206.05038088, 12626.57969487,\n       31068.99767201,  5154.86196797, 13353.66341099, 31848.23421894,\n        6451.72729668,  8005.36753604, 14446.79085752, 10130.26533401,\n       14277.88512152,  2060.47482389,  3368.64318461,  4962.54187204,\n        4677.48277623,  3357.95910118,  6001.00541839, 11086.5349986 ,\n        1880.29084264, 10576.56585395,  4243.18329484,  7994.01427891,\n        4709.86209866,  9760.0859697 ,  6401.80121266, 12050.23144198,\n       12337.62399678, 15028.80468444, 41638.46762976, 12157.60265361,\n       12219.05048721, 11057.95058733,  9084.32985714, 11848.5254576 ,\n       34870.74681056, 44404.37135447, 18794.74837486, 13398.33596255,\n       15616.58956118, 11820.03569894, 46898.01302138,  8814.49024956])"},"exec_count":41}},"pos":36,"start":1659030135576,"state":"done","type":"cell"}
{"cell_type":"code","end":1659030147024,"exec_count":42,"id":"4de3f1","input":"MAE = np.mean(abs(y_test - y_hat))\nMAE","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"osxC5vVotKWS","outputId":"aa7e2d67-12af-4389-e7e0-4c23b23e8bf4"},"output":{"0":{"data":{"text/plain":"3012.135518512749"},"exec_count":42}},"pos":32,"start":1659030147005,"state":"done","type":"cell"}
{"cell_type":"code","end":1659030719035,"exec_count":45,"id":"ce0cfd","input":"import plotly.express as px\npx.scatter(x=y_test,y=y_hat)","kernel":"python3-ubuntu","output":{"0":{"data":{"iframe":"b8b1bebdea6c306d4b8b3a5aa41bd9b9c314dd88"}}},"pos":38,"start":1659030718901,"state":"done","type":"cell"}
{"cell_type":"code","end":1659033543816,"exec_count":48,"id":"e42e30","input":"print(poly.score(x_test,y_test))","kernel":"python3-ubuntu","output":{"0":{"ename":"AttributeError","evalue":"'PolynomialFeatures' object has no attribute 'score'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-48-083990e584ae>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpoly\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'PolynomialFeatures' object has no attribute 'score'"]}},"pos":33,"start":1659033543312,"state":"done","type":"cell"}
{"cell_type":"code","end":1659033545828,"exec_count":49,"id":"6df3b2","input":"print(linr.score(x_test, y_test))","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CS2KN6gms_io","outputId":"4f865d48-e1ea-4e80-ebb1-869f5f2052b0"},"output":{"0":{"name":"stdout","text":"0.877253993754613\n"}},"pos":31,"start":1659033545762,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"1bd826","input":"optimizer.best_params_","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c2da93","input":"","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f1ed12","input":"","pos":27,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"fec931","input":"sns.heatmap(my_data.corr())","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":344},"id":"H7FyJo_QutAX","outputId":"d1ad6159-df64-4882-e2ae-d78cfa814cc5"},"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7f64087730d0>"},"exec_count":10,"output_type":"execute_result"},"1":{"data":{"image/png":"f85e5a980b847aa05ebb19e3bcb7fbceb88c5577","text/plain":"<Figure size 864x504 with 2 Axes>"},"exec_count":10,"metadata":{"image/png":{"height":415,"width":641},"needs_background":"light"},"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"8672d4","input":"# Checking for Missing Data\nif X.shape[0] != y.shape[0]:\n  print(\"It looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\")\n  \nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\n# Generates train and test sets and formats them for training.\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","metadata":{"id":"wKS4pvcEsLOF"},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"1ff6d5","input":"#let's plot our split data to see how it looks!\nplt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the test set \nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","metadata":{"id":"6IxwdW5osUDI"},"output":{"0":{"ename":"ValueError","evalue":"x and y must be the same size","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-27-54c9ff6530d2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# plot the train set\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'orange'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'y'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, plotnonfinite, data, **kwargs)\u001b[0m\n\u001b[1;32m   2834\u001b[0m         \u001b[0mvmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverts\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2835\u001b[0m         edgecolors=None, *, plotnonfinite=False, data=None, **kwargs):\n\u001b[0;32m-> 2836\u001b[0;31m     __ret = gca().scatter(\n\u001b[0m\u001b[1;32m   2837\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmarker\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcmap\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2838\u001b[0m         \u001b[0mvmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvmax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlinewidths\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1599\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1600\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1601\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1602\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1603\u001b[0m         \u001b[0mbound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, plotnonfinite, **kwargs)\u001b[0m\n\u001b[1;32m   4441\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4442\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4443\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"x and y must be the same size\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4444\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4445\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: x and y must be the same size"]},"1":{"data":{"image/png":"0476fd12729a83cadfc75bc7f278ea0391dd8f42","text/plain":"<Figure size 720x360 with 1 Axes>"},"exec_count":27,"metadata":{"image/png":{"height":306,"width":298},"needs_background":"light"},"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"f7fc78","input":"#cleaning the data -- dropping missing and duplicate values for sanity\nmy_data.dropna(inplace = True)\nmy_data.drop_duplicates(inplace = True)\nmy_data = my_data.reset_index(drop=True)\n\nlength = len(my_data.index) #save length of array of later","metadata":{"id":"BYHvay0xa-sK"},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"5f1ff0","input":"def change_smoke(val):\n    if val == 'no':\n        return 0\n    elif val == 'yes':\n        return 1\nmy_data['smoker'] = my_data['smoker'].apply(change_smoke)\nmy_data['smoker']","output":{"0":{"data":{"text/plain":"0       1\n1       0\n2       0\n3       0\n4       0\n       ..\n1332    0\n1333    0\n1334    0\n1335    0\n1336    1\nName: smoker, Length: 1337, dtype: int64"},"exec_count":33,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"ea963a","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"RarVj0Kor54b","outputId":"c3649dc9-e5f0-4930-f4b1-100ad0987777"},"output":{"0":{"ename":"ValueError","evalue":"x and y must be the same size","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-2e3040016c56>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_hat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'--'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'orange'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'x'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'y'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfontsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, plotnonfinite, data, **kwargs)\u001b[0m\n\u001b[1;32m   2834\u001b[0m         \u001b[0mvmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverts\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2835\u001b[0m         edgecolors=None, *, plotnonfinite=False, data=None, **kwargs):\n\u001b[0;32m-> 2836\u001b[0;31m     __ret = gca().scatter(\n\u001b[0m\u001b[1;32m   2837\u001b[0m         \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmarker\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcmap\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcmap\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2838\u001b[0m         \u001b[0mvmin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvmin\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvmax\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvmax\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidths\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlinewidths\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36minner\u001b[0;34m(ax, data, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1599\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1600\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1601\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msanitize_sequence\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1602\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1603\u001b[0m         \u001b[0mbound\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnew_sig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3/dist-packages/matplotlib/axes/_axes.py\u001b[0m in \u001b[0;36mscatter\u001b[0;34m(self, x, y, s, c, marker, cmap, norm, vmin, vmax, alpha, linewidths, verts, edgecolors, plotnonfinite, **kwargs)\u001b[0m\n\u001b[1;32m   4441\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mravel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4442\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4443\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"x and y must be the same size\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4444\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4445\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0ms\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: x and y must be the same size"]},"1":{"data":{"image/png":"8a0fe3fffaf19f3368857abf21eb174044d5a927","text/plain":"<Figure size 720x360 with 1 Axes>"},"exec_count":33,"metadata":{"image/png":{"height":302,"width":611},"needs_background":"light"},"output_type":"execute_result"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"bccea4","input":"def change(val):\n    if val == 'southwest':\n        return 0\n    elif val == 'southeast':\n        return 1\n    elif val == 'northwest':\n        return 2\n    elif val == 'northeast':\n        return 3\nmy_data['region'] = my_data['region'].apply(change)\nmy_data['region']","output":{"0":{"data":{"text/plain":"0       0\n1       1\n2       1\n3       2\n4       2\n       ..\n1332    2\n1333    3\n1334    1\n1335    0\n1336    2\nName: region, Length: 1337, dtype: int64"},"exec_count":34,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"6d425f","input":"def change_sex(val):\n    if val == 'female':\n        return 0\n    elif val=='male':\n        return 1\nmy_data['sex'] = my_data['sex'].apply(change_sex)\nmy_data['sex']","output":{"0":{"data":{"text/plain":"0       0\n1       1\n2       1\n3       1\n4       1\n       ..\n1332    1\n1333    0\n1334    0\n1335    0\n1336    0\nName: sex, Length: 1337, dtype: int64"},"exec_count":35,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":36,"id":"71df4f","input":"X = my_data.drop('charges',axis=1)\nX = X.to_numpy()\ny = my_data[\"charges\"].to_numpy()\nX","metadata":{"id":"WW77IzOwZaKp"},"output":{"0":{"data":{"text/plain":"array([[19.  ,  0.  , 27.9 ,  0.  ,  1.  ,  0.  ],\n       [18.  ,  1.  , 33.77,  1.  ,  0.  ,  1.  ],\n       [28.  ,  1.  , 33.  ,  3.  ,  0.  ,  1.  ],\n       ...,\n       [18.  ,  0.  , 36.85,  0.  ,  0.  ,  1.  ],\n       [21.  ,  0.  , 25.8 ,  0.  ,  0.  ,  0.  ],\n       [61.  ,  0.  , 29.07,  0.  ,  1.  ,  2.  ]])"},"exec_count":36,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"4f7789","input":"my_data['smoker']","output":{"0":{"data":{"text/plain":"0       yes\n1        no\n2        no\n3        no\n4        no\n       ... \n1333     no\n1334     no\n1335     no\n1336     no\n1337    yes\nName: smoker, Length: 1338, dtype: object"},"exec_count":5,"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"df69d3","input":"my_data.head()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"2n8n7O_8cUxX","outputId":"b1d56a4f-9c74-4cf0-b1eb-055ea2aab14e"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>bmi</th>\n      <th>children</th>\n      <th>smoker</th>\n      <th>region</th>\n      <th>charges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19</td>\n      <td>female</td>\n      <td>27.900</td>\n      <td>0</td>\n      <td>yes</td>\n      <td>southwest</td>\n      <td>16884.92400</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>18</td>\n      <td>male</td>\n      <td>33.770</td>\n      <td>1</td>\n      <td>no</td>\n      <td>southeast</td>\n      <td>1725.55230</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>28</td>\n      <td>male</td>\n      <td>33.000</td>\n      <td>3</td>\n      <td>no</td>\n      <td>southeast</td>\n      <td>4449.46200</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>33</td>\n      <td>male</td>\n      <td>22.705</td>\n      <td>0</td>\n      <td>no</td>\n      <td>northwest</td>\n      <td>21984.47061</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32</td>\n      <td>male</td>\n      <td>28.880</td>\n      <td>0</td>\n      <td>no</td>\n      <td>northwest</td>\n      <td>3866.85520</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   age     sex     bmi  children smoker     region      charges\n0   19  female  27.900         0    yes  southwest  16884.92400\n1   18    male  33.770         1     no  southeast   1725.55230\n2   28    male  33.000         3     no  southeast   4449.46200\n3   33    male  22.705         0     no  northwest  21984.47061\n4   32    male  28.880         0     no  northwest   3866.85520"},"exec_count":5,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":61,"id":"30c839","input":"\nMAE = np.mean(abs(y_test - y_hat2))\nMAE","output":{"0":{"data":{"text/plain":"3012.135518512749"},"exec_count":61,"output_type":"execute_result"}},"pos":34,"type":"cell"}
{"cell_type":"markdown","id":"0d6d83","input":"# Data Loading, Cleaning, and Setup","metadata":{"id":"JlrQHpg8a-sI"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"15d948","input":"### Creating and Fitting\n\n","metadata":{"id":"e1m-wKeYsFEl"},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"2a5a4a","input":"np docs - https://numpy.org/doc/stable/reference/index.html#reference","pos":18,"type":"cell"}
{"cell_type":"markdown","id":"6a688c","input":"Linear regression naturally works best on highly correlated data, so I'm going to create a heatmap to see which variables are correlated! ","metadata":{"id":"J3L_hb0Ou4sn"},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"75bcb3","input":"Read in your data into a pandas dataframe by replacing the `filename` variable with your file's path. You can also use the current code below to work on a mpg dataset, where the target variable we are predicting is **miles per gallon** based on other car features. \n\n> We should choose two columns that we want to run regresssion on. Use the `.head()` function to decide which columns would be best!\n\n","metadata":{"id":"m4-2ySg9W0Fw"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"834635","input":"### Results and Evaluation\n\nOne way to see if the model is pretty good is the coefficient of determination (R^2) using the `score()` function. You can read about it here: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression.score.\n\nAnother way is to compare our mean absolute error (MAE). MAE measures the prediction error. Mathematically, it is the average absolute difference between observed and predicted outcomes, MAE = mean(abs(observeds - predicteds)). MAE is less sensitive to outliers compared to RMSE.\n\nRead some more about regression model metrics [here](http://www.sthda.com/english/articles/38-regression-model-validation/158-regression-model-accuracy-metrics-r-square-aic-bic-cp-and-more/).\n\n","metadata":{"id":"14TdY4RGr-RG"},"pos":30,"type":"cell"}
{"cell_type":"markdown","id":"84dcb8","input":"# Linear Regression with Scikit-learn's linear regression\n\nWe can use Scikit-Learn’s Linear Regression to fit the model. Most other models we will use in the course \n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html","metadata":{"id":"cbeaQMpna-sR"},"pos":16,"type":"cell"}
{"cell_type":"markdown","id":"b38895","input":"### Creating Predictions\nPredict outputs on our x_test data that we held out. Think of this as a way to see how the model does on new data!","metadata":{"id":"QFb-_EiFrvzQ"},"pos":25,"type":"cell"}
{"cell_type":"markdown","id":"b8e1b5","input":"pandas docs - https://pandas.pydata.org/docs/reference/index.html#api <br>\nseaborn docs - https://seaborn.pydata.org/api.html","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"cfc7f8","input":"# Linear regression using SKLearn on your own Data!\nThis should look familiar... we now are going to use linear regression on some of our own features. I recommend walking through the code below first, then importing your dataset and working through the same problem with your data!","metadata":{"id":"K_X2fB9ta-rv"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"ddf4cc","input":"# Repeat the process!\nTry running linear regression on multiple combinations of features (columns) on your dataset. What combination yields the best score? How does this connect to your correlation chart? ","metadata":{"id":"2OixzlOot-U6"},"pos":39,"type":"cell"}
{"cell_type":"markdown","id":"e4ea6f","input":"### Getting to know the problem\n\nFor my data, my columns inlude `'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin', and 'name'`. \n\nTo start, I would like to create a linear regression model that uses horsepower (X) to predict miles per gallon (y) and see how strong our linear regression model is. For your data, you should choose two columns as well to represent X and y.\n\n","metadata":{"id":"w78dUshNZarz"},"pos":14,"type":"cell"}
{"cell_type":"markdown","id":"ea1a2e","input":"### Split the data\n\nOur model should ignore 20% of data points to use for testing so it doesn't just memorize the data. We need to make sure there are no missing data points before continuing.\n\n","metadata":{"id":"g5Zk8_6ksLur"},"pos":17,"type":"cell"}
{"end":1659030217390,"exec_count":44,"id":"29c025","input":"np.sqrt(((y_hat - y_test) ** 2).mean())","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"4749.2444645876585"},"exec_count":44}},"pos":34.5,"start":1659030217337,"state":"done","type":"cell"}
{"end":1659030863964,"exec_count":47,"id":"8c81b7","input":"from sklearn.metrics import r2_score\nr2_score(y_test,y_hat)","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"0.877253993754613"},"exec_count":47}},"pos":34.75,"start":1659030863939,"state":"done","type":"cell"}
{"id":0,"time":1659033372892,"type":"user"}
{"last_load":1659018902242,"type":"file"}