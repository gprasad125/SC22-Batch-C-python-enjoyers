{"backend_state":"init","connection_file":"/projects/200e8042-15d9-45b5-b665-c79cbc8761e9/.local/share/jupyter/runtime/kernel-b96a10de-478a-4330-bfda-0d822b64fee4.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"34adc6","input":"","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a406be","input":"","pos":15,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f76d17","input":"","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"b5b760","input":"y_tree = clf_tree.predict(x_test)","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"3c8458","input":"from sklearn.metrics import mean_absolute_error\n\nmean_absolute_error(y_test, y_tree)","output":{"0":{"data":{"text/plain":"3349.6945478731345"},"exec_count":11,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"561f83","input":"clf_tree.score(x_test, y_test)","output":{"0":{"data":{"text/plain":"0.7114939714378783"},"exec_count":12,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"eec613","input":"from sklearn.model_selection import GridSearchCV\n\nparameters = {\n    \"criterion\" : [\"squared_error\", \"friedman_mse\", \"absolute_error\", \"poisson\"],\n    \"splitter\" : [\"best\", \"random\"],\n    \"max_depth\" : [5, 10, 15, 20, 25],\n    \"min_samples_split\" : [5, 10, 15, 20, 25],\n    \"min_samples_leaf\" : [5, 10, 15, 20, 25],\n    \"min_weight_fraction_leaf\" : [5, 10, 15, 20, 25],\n    \"max_features\" : [5, 10, 15, 20, 25, \"auto\", \"sqrt\", \"log2\"],\n    \"max_leaf_nodes\" : [5, 10, 15, 20, 25],\n    \"min_impurity_decrease\" : [1.0, 25.0, 50.0]\n    }\n\noptimizer = GridSearchCV(tree.DecisionTreeRegressor(), param_grid = parameters)\noptimizer.fit(x_train, y_train)","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"b49b34","input":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"f70ef8","input":"insurance = pd.read_csv('../../finalProject/Data/insurance.csv')","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"d783ee","input":"insurance.dropna(inplace = True)\ninsurance.drop_duplicates(inplace = True)\ninsurance = insurance.reset_index(drop=True)\n\nlength = len(insurance.index)","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"e7b684","input":"def change_to_binary(sex):\n\n    if sex == \"male\":\n        return 0\n    elif sex == \"female\":\n        return 1\n\ninsurance['sex'] = insurance['sex'].apply(change_to_binary)\n\ndef change_to_binary(smoker):\n\n    if smoker == \"yes\":\n        return 0\n    elif smoker == \"no\":\n        return 1\ninsurance['smoker'] = insurance['smoker'].apply(change_to_binary)\n\ndef change_to_numerical(region):\n\n    if region == \"northeast\":\n        return 0\n    elif region == \"southeast\":\n        return 1\n    elif region == \"northwest\":\n        return 2\n    elif region == \"southwest\":\n        return 3\n\ninsurance['region'] = insurance['region'].apply(change_to_numerical)\ninsurance.head(1)","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>bmi</th>\n      <th>children</th>\n      <th>smoker</th>\n      <th>region</th>\n      <th>charges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19</td>\n      <td>1</td>\n      <td>27.9</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>16884.924</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   age  sex   bmi  children  smoker  region    charges\n0   19    1  27.9         0       0       3  16884.924"},"exec_count":5,"output_type":"execute_result"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"1b01eb","input":"sns.heatmap(insurance.corr(), annot=True, linewidth=.5)","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":6,"output_type":"execute_result"},"1":{"data":{"image/png":"18160e9fa569b5cfe9424d09cc5cc6d74c680b43","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":6,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"943aad","input":"target = insurance[\"charges\"]\ninput_columns = insurance.loc[:, insurance.columns != \"charges\"]","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"b7c3da","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2)","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"74b4c4","input":"from sklearn import tree\n\nclf_tree = tree.DecisionTreeRegressor()\nclf_tree = clf_tree.fit(x_train, y_train)","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"cb02bf","input":"## String to Binary\n\n","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"cd1f4f","input":"## Data Cleaning\n\n","pos":2,"type":"cell"}
{"id":0,"time":1659032156176,"type":"user"}
{"last_load":1659052998184,"type":"file"}