{"backend_state":"running","connection_file":"/projects/200e8042-15d9-45b5-b665-c79cbc8761e9/.local/share/jupyter/runtime/kernel-42b75a73-e18b-41e7-b962-6464c0064440.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1659633661997,"id":"74b4c4","input":"from sklearn import tree\n\nclf_tree = tree.DecisionTreeRegressor()\nclf_tree = clf_tree.fit(x_train, y_train)","kernel":"ds_env","pos":9,"start":1659633661997,"state":"done","type":"cell"}
{"cell_type":"code","end":1659633661998,"exec_count":1,"id":"b7c3da","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2)","kernel":"ds_env","output":{"0":{"ename":"NameError","evalue":"name 'input_columns' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [1]\u001b[0m, in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmodel_selection\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m train_test_split\n\u001b[0;32m----> 4\u001b[0m x_train, x_test, y_train, y_test \u001b[38;5;241m=\u001b[39m train_test_split(\u001b[43minput_columns\u001b[49m, target, test_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.2\u001b[39m)\n","\u001b[0;31mNameError\u001b[0m: name 'input_columns' is not defined"]}},"pos":8,"start":1659633660832,"state":"done","type":"cell"}
{"cell_type":"code","end":1659633661998,"id":"3c8458","input":"from sklearn.metrics import mean_squared_error\n\nmean_squared_error(y_test, y_tree)","kernel":"ds_env","pos":11,"start":1659633661998,"state":"done","type":"cell"}
{"cell_type":"code","end":1659633661998,"id":"b5b760","input":"y_tree = clf_tree.predict(x_test)","kernel":"ds_env","pos":10,"start":1659633661998,"state":"done","type":"cell"}
{"cell_type":"code","end":1659633662265,"exec_count":2,"id":"561f83","input":"clf_tree.score(x_test, y_test)","kernel":"ds_env","output":{"0":{"ename":"NameError","evalue":"name 'clf_tree' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [2]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mclf_tree\u001b[49m\u001b[38;5;241m.\u001b[39mscore(x_test, y_test)\n","\u001b[0;31mNameError\u001b[0m: name 'clf_tree' is not defined"]}},"pos":12,"start":1659633662249,"state":"done","type":"cell"}
{"cell_type":"code","end":1659633671303,"exec_count":4,"id":"b49b34","input":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics","kernel":"ds_env","pos":0,"start":1659633669969,"state":"done","type":"cell"}
{"cell_type":"code","end":1659633671319,"exec_count":5,"id":"f70ef8","input":"insurance = pd.read_csv('../../finalProject/Data/insurance.csv')","kernel":"ds_env","pos":1,"start":1659633671309,"state":"done","type":"cell"}
{"cell_type":"code","end":1659633671872,"exec_count":6,"id":"d783ee","input":"insurance.dropna(inplace = True)\ninsurance.drop_duplicates(inplace = True)\ninsurance = insurance.reset_index(drop=True)\n\nlength = len(insurance.index)","kernel":"ds_env","pos":3,"start":1659633671864,"state":"done","type":"cell"}
{"cell_type":"code","end":1659633672908,"exec_count":7,"id":"e7b684","input":"def change_to_binary(sex):\n\n    if sex == \"male\":\n        return 0\n    elif sex == \"female\":\n        return 1\n\ninsurance['sex'] = insurance['sex'].apply(change_to_binary)\n\ndef change_to_binary(smoker):\n\n    if smoker == \"yes\":\n        return 0\n    elif smoker == \"no\":\n        return 1\ninsurance['smoker'] = insurance['smoker'].apply(change_to_binary)\n\ndef change_to_numerical(region):\n\n    if region == \"northeast\":\n        return 0\n    elif region == \"southeast\":\n        return 1\n    elif region == \"northwest\":\n        return 2\n    elif region == \"southwest\":\n        return 3\n\ninsurance['region'] = insurance['region'].apply(change_to_numerical)\ninsurance.head(1)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>bmi</th>\n      <th>children</th>\n      <th>smoker</th>\n      <th>region</th>\n      <th>charges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19</td>\n      <td>1</td>\n      <td>27.9</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>16884.924</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   age  sex   bmi  children  smoker  region    charges\n0   19    1  27.9         0       0       3  16884.924"},"exec_count":7}},"pos":5,"start":1659633672875,"state":"done","type":"cell"}
{"cell_type":"code","end":1659633674299,"exec_count":8,"id":"1b01eb","input":"sns.heatmap(insurance.corr(), annot=True, linewidth=.5)","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":8},"1":{"data":{"image/png":"18160e9fa569b5cfe9424d09cc5cc6d74c680b43","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":6,"start":1659633673546,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c5daee","input":"","pos":18,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"f76d17","input":"optimizer.best_params_","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"eec613","input":"from sklearn.model_selection import GridSearchCV\n\nparameters = {\n    \"criterion\" : [\"squared_error\", \"friedman_mse\", \"absolute_error\", \"poisson\"],\n    \"max_depth\" : [5, 10, 15, 20, 25],\n    \"min_samples_leaf\" : [5, 10, 15, 20, 25],\n    \"min_weight_fraction_leaf\" : [0.5],\n    \"max_leaf_nodes\" : [5, 10, 15, 20, 25],\n    \"min_impurity_decrease\" : [1.0, 25.0, 50.0]\n    \n    }\n\noptimizer = GridSearchCV(tree.DecisionTreeRegressor(), param_grid = parameters)\noptimizer.fit(x_train, y_train)","kernel":"ds_env","output":{"0":{"ename":"NameError","evalue":"name 'tree' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [3]\u001b[0m, in \u001b[0;36m<cell line: 12>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mmodel_selection\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m GridSearchCV\n\u001b[1;32m      3\u001b[0m parameters \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m      4\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcriterion\u001b[39m\u001b[38;5;124m\"\u001b[39m : [\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msquared_error\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfriedman_mse\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mabsolute_error\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpoisson\u001b[39m\u001b[38;5;124m\"\u001b[39m],\n\u001b[1;32m      5\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmax_depth\u001b[39m\u001b[38;5;124m\"\u001b[39m : [\u001b[38;5;241m5\u001b[39m, \u001b[38;5;241m10\u001b[39m, \u001b[38;5;241m15\u001b[39m, \u001b[38;5;241m20\u001b[39m, \u001b[38;5;241m25\u001b[39m],\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmin_impurity_decrease\u001b[39m\u001b[38;5;124m\"\u001b[39m : [\u001b[38;5;241m1.0\u001b[39m, \u001b[38;5;241m25.0\u001b[39m, \u001b[38;5;241m50.0\u001b[39m]\n\u001b[1;32m     10\u001b[0m     }\n\u001b[0;32m---> 12\u001b[0m optimizer \u001b[38;5;241m=\u001b[39m GridSearchCV(\u001b[43mtree\u001b[49m\u001b[38;5;241m.\u001b[39mDecisionTreeRegressor(), param_grid \u001b[38;5;241m=\u001b[39m parameters)\n\u001b[1;32m     13\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mfit(x_train, y_train)\n","\u001b[0;31mNameError\u001b[0m: name 'tree' is not defined"]}},"pos":13,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":38,"id":"a406be","input":"new_tree = tree.DecisionTreeRegressor(criterion= 'squared_error',max_depth= 5, max_leaf_nodes= 5, min_impurity_decrease= 1.0, min_samples_leaf= 10)\nnew_tree.fit(x_train, y_train)\n","output":{"0":{"data":{"text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeRegressor(max_depth=5, max_leaf_nodes=5, min_impurity_decrease=1.0,\n                      min_samples_leaf=10)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeRegressor</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeRegressor(max_depth=5, max_leaf_nodes=5, min_impurity_decrease=1.0,\n                      min_samples_leaf=10)</pre></div></div></div></div></div>","text/plain":"DecisionTreeRegressor(max_depth=5, max_leaf_nodes=5, min_impurity_decrease=1.0,\n                      min_samples_leaf=10)"},"exec_count":38,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"34adc6","input":"ynew_tree = new_tree.predict(x_test)\nnew_tree.score(x_test, y_test)","output":{"0":{"data":{"text/plain":"0.8111432847879765"},"exec_count":39,"output_type":"execute_result"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"5e3f4b","input":"from sklearn.metrics import mean_squared_error\n\nmean_squared_error(y_test, ynew_tree)","output":{"0":{"data":{"text/plain":"26283413.704976987"},"exec_count":41,"output_type":"execute_result"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"943aad","input":"target = insurance[\"charges\"]\ninput_columns = insurance.loc[:, insurance.columns != \"charges\"]","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"cb02bf","input":"## String to Binary\n\n","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"cd1f4f","input":"## Data Cleaning\n\n","pos":2,"type":"cell"}
{"id":0,"time":1659634385490,"type":"user"}
{"last_load":1659632817078,"type":"file"}