{"backend_state":"running","connection_file":"/projects/200e8042-15d9-45b5-b665-c79cbc8761e9/.local/share/jupyter/runtime/kernel-0f5f555c-340e-4bab-a153-8e92bf62fffb.json","kernel":"python3-ubuntu","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"colab":{"collapsed_sections":[],"name":"linear_regression_sklearn_on_own_data.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1658860666540,"exec_count":41,"id":"fdebff","input":"# import libraries \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport statistics","kernel":"python3-ubuntu","metadata":{"id":"IecuRdF1a-sG"},"pos":1,"start":1658860666536,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860668811,"exec_count":42,"id":"c770cf","input":"filename = 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mpg.csv'\nmy_data = pd.read_csv(filename) #TODO: read in your file by replacing the filename variable with your file's path. You can also use this current code to work on an automobile dataset! ","kernel":"python3-ubuntu","metadata":{"id":"mBcweiAXW3bC"},"pos":5,"start":1658860668602,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860796635,"exec_count":43,"id":"a7848d","input":"my_data.head()","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"2n8n7O_8cUxX","outputId":"b1d56a4f-9c74-4cf0-b1eb-055ea2aab14e"},"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mpg</th>\n      <th>cylinders</th>\n      <th>displacement</th>\n      <th>horsepower</th>\n      <th>weight</th>\n      <th>acceleration</th>\n      <th>model_year</th>\n      <th>origin</th>\n      <th>name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>307.0</td>\n      <td>130.0</td>\n      <td>3504</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>chevrolet chevelle malibu</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>15.0</td>\n      <td>8</td>\n      <td>350.0</td>\n      <td>165.0</td>\n      <td>3693</td>\n      <td>11.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>buick skylark 320</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>18.0</td>\n      <td>8</td>\n      <td>318.0</td>\n      <td>150.0</td>\n      <td>3436</td>\n      <td>11.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>plymouth satellite</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>16.0</td>\n      <td>8</td>\n      <td>304.0</td>\n      <td>150.0</td>\n      <td>3433</td>\n      <td>12.0</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>amc rebel sst</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>17.0</td>\n      <td>8</td>\n      <td>302.0</td>\n      <td>140.0</td>\n      <td>3449</td>\n      <td>10.5</td>\n      <td>70</td>\n      <td>usa</td>\n      <td>ford torino</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"    mpg  cylinders  displacement  horsepower  weight  acceleration  \\\n0  18.0          8         307.0       130.0    3504          12.0   \n1  15.0          8         350.0       165.0    3693          11.5   \n2  18.0          8         318.0       150.0    3436          11.0   \n3  16.0          8         304.0       150.0    3433          12.0   \n4  17.0          8         302.0       140.0    3449          10.5   \n\n   model_year origin                       name  \n0          70    usa  chevrolet chevelle malibu  \n1          70    usa          buick skylark 320  \n2          70    usa         plymouth satellite  \n3          70    usa              amc rebel sst  \n4          70    usa                ford torino  "},"exec_count":43}},"pos":6,"start":1658860796620,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860797120,"exec_count":44,"id":"33555d","input":"#cleaning the data -- dropping missing and duplicate values for sanity\nmy_data.dropna(inplace = True)\nmy_data.drop_duplicates(inplace = True)\nmy_data = my_data.reset_index(drop=True)\n\nlength = len(my_data.index) #save length of array of later","kernel":"python3-ubuntu","metadata":{"id":"BYHvay0xa-sK"},"pos":7,"start":1658860797100,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860799549,"exec_count":45,"id":"7fb057","input":"sns.heatmap(my_data.corr())","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":344},"id":"H7FyJo_QutAX","outputId":"d1ad6159-df64-4882-e2ae-d78cfa814cc5"},"output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7ffb869d9f40>"},"exec_count":45},"1":{"data":{"image/png":"0afdb7ea88e663b1d2b006d7c5528ae073007949","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":415,"width":714},"needs_background":"light"}}},"pos":9,"start":1658860798858,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860801117,"exec_count":46,"id":"1bb6c4","input":"Horsepower = my_data[\"horsepower\"].to_numpy()\nMpg = my_data[\"mpg\"].to_numpy()","kernel":"python3-ubuntu","metadata":{"id":"WW77IzOwZaKp"},"pos":11,"start":1658860801108,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860803770,"exec_count":47,"id":"84e878","input":"# Checking for Missing Data\nif X.shape[0] != y.shape[0]:\n  print(\"It looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\")\n  \nidx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\n# Generates train and test sets and formats them for training.\nx_train, y_train = X[train_idx], y[train_idx]\nx_test, y_test = X[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","kernel":"python3-ubuntu","metadata":{"id":"wKS4pvcEsLOF"},"output":{"0":{"ename":"NameError","evalue":"name 'X' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-47-aa368705983c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Checking for Missing Data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mif\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"It looks like you have missing data. You may want to preprocess your data more with pandas to delete any rows with missing, NaN, N/A, and null values.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0midx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlength\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#shuffle our dataset indices so we don't always split the same way!\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'X' is not defined"]}},"pos":16,"start":1658860803742,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860804805,"exec_count":48,"id":"391e53","input":"#let's plot our split data to see how it looks!\nplt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the test set \nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","kernel":"python3-ubuntu","metadata":{"id":"6IxwdW5osUDI"},"output":{"0":{"data":{"image/png":"4330ca324ca982eafa4e63e76b8a07a5666c9d31","text/plain":"<Figure size 720x360 with 2 Axes>"},"metadata":{"image/png":{"height":342,"width":635},"needs_background":"light"}}},"pos":17,"start":1658860804226,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860805332,"exec_count":49,"id":"183db2","input":"from sklearn.linear_model import LinearRegression\n#Create the model object\nlinr = LinearRegression()\n#Fit (train) the model -- this is where the ML happens!\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_)","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jkPf0bt4a-sV","outputId":"99433807-734f-4a07-fe0a-26b3ad2fb709"},"output":{"0":{"name":"stdout","text":"[1114.39137331] [[395.27064742]]\n"}},"pos":19,"start":1658860805314,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860805795,"exec_count":50,"id":"7bb1e2","input":"print('hello world')","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"hello world\n"}},"pos":20,"start":1658860805791,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860807248,"exec_count":51,"id":"0aab29","input":"# Predicting using SKLearn\ny_hat = linr.predict(x_test)","kernel":"python3-ubuntu","metadata":{"id":"o9ZDJB1qrJ7_"},"pos":22,"start":1658860807245,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860808079,"exec_count":52,"id":"c25030","input":"#plotting results\nplt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":359},"id":"RarVj0Kor54b","outputId":"c3649dc9-e5f0-4930-f4b1-100ad0987777"},"output":{"0":{"data":{"image/png":"54c12eaf12f4bfa39903d086bbf012ffcb7fe05c","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":635},"needs_background":"light"}}},"pos":23,"start":1658860807719,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860811044,"exec_count":53,"id":"f0530a","input":"print(linr.score(x_test, y_test))","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CS2KN6gms_io","outputId":"4f865d48-e1ea-4e80-ebb1-869f5f2052b0"},"output":{"0":{"name":"stdout","text":"0.03436621549774588\n"}},"pos":25,"start":1658860811031,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860812068,"exec_count":54,"id":"ab135e","input":"MAE = np.mean(abs(y_test - y_hat))\nMAE","kernel":"python3-ubuntu","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"osxC5vVotKWS","outputId":"aa7e2d67-12af-4389-e7e0-4c23b23e8bf4"},"output":{"0":{"data":{"text/plain":"9433.907893892427"},"exec_count":54}},"pos":26,"start":1658860811973,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860813547,"exec_count":55,"id":"8c1da6","input":"insurance = pd.read_csv('../../finalProject/Data/insurance.csv')","kernel":"python3-ubuntu","pos":28,"start":1658860813536,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860814192,"exec_count":56,"id":"69dc2e","input":"insurance.head()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>bmi</th>\n      <th>children</th>\n      <th>smoker</th>\n      <th>region</th>\n      <th>charges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19</td>\n      <td>female</td>\n      <td>27.900</td>\n      <td>0</td>\n      <td>yes</td>\n      <td>southwest</td>\n      <td>16884.92400</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>18</td>\n      <td>male</td>\n      <td>33.770</td>\n      <td>1</td>\n      <td>no</td>\n      <td>southeast</td>\n      <td>1725.55230</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>28</td>\n      <td>male</td>\n      <td>33.000</td>\n      <td>3</td>\n      <td>no</td>\n      <td>southeast</td>\n      <td>4449.46200</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>33</td>\n      <td>male</td>\n      <td>22.705</td>\n      <td>0</td>\n      <td>no</td>\n      <td>northwest</td>\n      <td>21984.47061</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32</td>\n      <td>male</td>\n      <td>28.880</td>\n      <td>0</td>\n      <td>no</td>\n      <td>northwest</td>\n      <td>3866.85520</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   age     sex     bmi  children smoker     region      charges\n0   19  female  27.900         0    yes  southwest  16884.92400\n1   18    male  33.770         1     no  southeast   1725.55230\n2   28    male  33.000         3     no  southeast   4449.46200\n3   33    male  22.705         0     no  northwest  21984.47061\n4   32    male  28.880         0     no  northwest   3866.85520"},"exec_count":56}},"pos":29,"start":1658860814173,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860814990,"exec_count":57,"id":"ffd228","input":"insurance.dropna(inplace = True)\ninsurance.drop_duplicates(inplace = True)\ninsurance = insurance.reset_index(drop=True)\n\nlength = len(insurance.index)","kernel":"python3-ubuntu","pos":30,"start":1658860814965,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860815654,"exec_count":58,"id":"afb20b","input":"insurance.head()","kernel":"python3-ubuntu","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>bmi</th>\n      <th>children</th>\n      <th>smoker</th>\n      <th>region</th>\n      <th>charges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19</td>\n      <td>female</td>\n      <td>27.900</td>\n      <td>0</td>\n      <td>yes</td>\n      <td>southwest</td>\n      <td>16884.92400</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>18</td>\n      <td>male</td>\n      <td>33.770</td>\n      <td>1</td>\n      <td>no</td>\n      <td>southeast</td>\n      <td>1725.55230</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>28</td>\n      <td>male</td>\n      <td>33.000</td>\n      <td>3</td>\n      <td>no</td>\n      <td>southeast</td>\n      <td>4449.46200</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>33</td>\n      <td>male</td>\n      <td>22.705</td>\n      <td>0</td>\n      <td>no</td>\n      <td>northwest</td>\n      <td>21984.47061</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32</td>\n      <td>male</td>\n      <td>28.880</td>\n      <td>0</td>\n      <td>no</td>\n      <td>northwest</td>\n      <td>3866.85520</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   age     sex     bmi  children smoker     region      charges\n0   19  female  27.900         0    yes  southwest  16884.92400\n1   18    male  33.770         1     no  southeast   1725.55230\n2   28    male  33.000         3     no  southeast   4449.46200\n3   33    male  22.705         0     no  northwest  21984.47061\n4   32    male  28.880         0     no  northwest   3866.85520"},"exec_count":58}},"pos":31,"start":1658860815561,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860816347,"exec_count":59,"id":"b171ea","input":"def change_to_binary(sex):\n\n    if sex == \"male\":\n        return 0\n    elif sex == \"female\":\n        return 1\n\ninsurance['sex'] = insurance['sex'].apply(change_to_binary)","kernel":"python3-ubuntu","pos":32,"start":1658860816341,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860817159,"exec_count":60,"id":"c51836","input":"def change_to_binary(smoker):\n\n    if smoker == \"yes\":\n        return 0\n    elif smoker == \"no\":\n        return 1\ninsurance['smoker'] = insurance['smoker'].apply(change_to_binary)","kernel":"python3-ubuntu","pos":33,"start":1658860817157,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860818064,"exec_count":61,"id":"115dca","input":"def change_to_numerical(region):\n\n    if region == \"northeast\":\n        return 0\n    elif region == \"southeast\":\n        return 1\n    elif region == \"northwest\":\n        return 2\n    elif region == \"southwest\":\n        return 3\n\ninsurance['region'] = insurance['region'].apply(change_to_numerical)\ninsurance.head(9999)","kernel":"python3-ubuntu","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>sex</th>\n      <th>bmi</th>\n      <th>children</th>\n      <th>smoker</th>\n      <th>region</th>\n      <th>charges</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19</td>\n      <td>1</td>\n      <td>27.900</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>16884.92400</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>18</td>\n      <td>0</td>\n      <td>33.770</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1725.55230</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>28</td>\n      <td>0</td>\n      <td>33.000</td>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>4449.46200</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>33</td>\n      <td>0</td>\n      <td>22.705</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>21984.47061</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>32</td>\n      <td>0</td>\n      <td>28.880</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3866.85520</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1332</th>\n      <td>50</td>\n      <td>0</td>\n      <td>30.970</td>\n      <td>3</td>\n      <td>1</td>\n      <td>2</td>\n      <td>10600.54830</td>\n    </tr>\n    <tr>\n      <th>1333</th>\n      <td>18</td>\n      <td>1</td>\n      <td>31.920</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2205.98080</td>\n    </tr>\n    <tr>\n      <th>1334</th>\n      <td>18</td>\n      <td>1</td>\n      <td>36.850</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1629.83350</td>\n    </tr>\n    <tr>\n      <th>1335</th>\n      <td>21</td>\n      <td>1</td>\n      <td>25.800</td>\n      <td>0</td>\n      <td>1</td>\n      <td>3</td>\n      <td>2007.94500</td>\n    </tr>\n    <tr>\n      <th>1336</th>\n      <td>61</td>\n      <td>1</td>\n      <td>29.070</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>29141.36030</td>\n    </tr>\n  </tbody>\n</table>\n<p>1337 rows × 7 columns</p>\n</div>","text/plain":"      age  sex     bmi  children  smoker  region      charges\n0      19    1  27.900         0       0       3  16884.92400\n1      18    0  33.770         1       1       1   1725.55230\n2      28    0  33.000         3       1       1   4449.46200\n3      33    0  22.705         0       1       2  21984.47061\n4      32    0  28.880         0       1       2   3866.85520\n...   ...  ...     ...       ...     ...     ...          ...\n1332   50    0  30.970         3       1       2  10600.54830\n1333   18    1  31.920         0       1       0   2205.98080\n1334   18    1  36.850         0       1       1   1629.83350\n1335   21    1  25.800         0       1       3   2007.94500\n1336   61    1  29.070         0       0       2  29141.36030\n\n[1337 rows x 7 columns]"},"exec_count":61}},"pos":34,"start":1658860818032,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860819632,"exec_count":62,"id":"67adbc","input":"sns.heatmap(insurance.corr())","kernel":"python3-ubuntu","output":{"0":{"data":{"text/plain":"<matplotlib.axes._subplots.AxesSubplot at 0x7ffb85136c40>"},"exec_count":62},"1":{"data":{"image/png":"2633d70ed35e14c4fbe84a92f6dc6e2c8239ff41","text/plain":"<Figure size 864x504 with 2 Axes>"},"metadata":{"image/png":{"height":415,"width":650},"needs_background":"light"}}},"pos":35,"start":1658860818898,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860819891,"exec_count":63,"id":"b6341e","input":"age = insurance[\"age\"].to_numpy()\nbmi = insurance[\"bmi\"].to_numpy()\ncharges = insurance[\"charges\"].to_numpy()\n\nX_1 = bmi\ny = charges","kernel":"python3-ubuntu","pos":36,"start":1658860819888,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860821507,"exec_count":64,"id":"2c7a78","input":"idx = np.arange(length) #shuffle our dataset indices so we don't always split the same way!\nnp.random.shuffle(idx)\n\n#split our data with 80% for training (learning) and 20% for testing.\nsplit_threshold = int(length * 0.8)\n\ntrain_idx = idx[:split_threshold]\n# Uses the remaining indices for testing\ntest_idx = idx[split_threshold:]\n\n# Generates train and test sets and formats them for training.\nx_train, y_train = bmi[train_idx], charges[train_idx]\nx_test, y_test = X_1[test_idx], y[test_idx]\nx_train= x_train.reshape(-1, 1)\ny_train= y_train.reshape(-1, 1)\nx_test = x_test.reshape(-1, 1)","kernel":"python3-ubuntu","pos":37,"start":1658860821499,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860822860,"exec_count":65,"id":"2bb4b2","input":"#let's plot our split data to see how it looks!\nplt.figure(figsize=(10,5))\n\n# plot the train set \nplt.subplot(1,2,1)\nplt.scatter(x_train,y_train, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Train')\nplt.grid('on')\n\n# plot the test set \nplt.subplot(1,2,2)\nplt.scatter(x_test, y_test)  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\n\nplt.show()","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"c39f1f90a798fa71cb614a47d163c4faef08b8aa","text/plain":"<Figure size 720x360 with 2 Axes>"},"metadata":{"image/png":{"height":342,"width":636},"needs_background":"light"}}},"pos":38,"start":1658860822358,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860824054,"exec_count":66,"id":"2ff5ae","input":"from sklearn.linear_model import LinearRegression\n#Create the model object\nlinr = LinearRegression()\n#Fit (train) the model -- this is where the ML happens!\nlinr.fit(x_train, y_train)\nprint(linr.intercept_, linr.coef_)","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"[443.38593276] [[426.88448566]]\n"}},"pos":39,"start":1658860824046,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860825218,"exec_count":67,"id":"ee624e","input":"y_hat = linr.predict(x_test)","kernel":"python3-ubuntu","pos":40,"start":1658860825215,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860826307,"exec_count":68,"id":"0ee1e6","input":"plt.figure(figsize=(10,5))\nplt.plot(x_test, y_hat, '--')\n\nplt.scatter(x_test,y_test, c='orange')  \nplt.xlabel('x', fontsize = 20) \nplt.ylabel('y', fontsize = 20)\nplt.title('Generated Data - Test')\nplt.grid('on')\nplt.show()","kernel":"python3-ubuntu","output":{"0":{"data":{"image/png":"69f1ff083e8327832efa44edae68360bd34ffbc4","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"image/png":{"height":342,"width":635},"needs_background":"light"}}},"pos":41,"start":1658860825987,"state":"done","type":"cell"}
{"cell_type":"code","end":1658860833786,"exec_count":69,"id":"2cd242","input":"print(linr.score(x_test, y_test))","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"0.002834786276265433\n"}},"pos":42,"start":1658860833775,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9466a9","input":"","pos":45,"type":"cell"}
{"cell_type":"code","exec_count":75,"id":"5bb2c9","input":"","kernel":"python3-ubuntu","output":{"0":{"name":"stdout","text":"[14362.61685    31547.47066667  8781.2        27461.36785\n  4527.18295     4790.75923333 29141.3603     14867.33864\n 30063.58055     6238.298      10325.206       6272.4772\n 10462.78155     8314.41635333 11859.8515     37889.75465\n  7731.4271      8277.42251667 20570.84663333 10762.95515\n 14800.37808333  8781.2         6753.038       2913.569\n  4527.18295     3077.0955      2166.732       7495.66883333\n 15555.18875     4527.18295    11224.6965     28096.49966667\n 14455.64405     9666.7715     22898.01475    30592.27466667\n 15756.075172   12574.049      14092.06011    20890.4553\n 11121.23982143  7442.99146667 20745.9891      4225.36603333\n 29141.3603      6548.8827      2803.69785     3837.4941\n 24097.9649      9504.3103     29400.7394775  23798.0926\n 12706.51265     7882.429475   14088.80959333 18791.04115\n  2066.36923333 14070.28941667  2066.36923333 10762.95515\n 21043.82429     6666.243      18680.05670667  6686.4313\n 25659.702214   13616.3586     23241.47453    15991.4607\n  8748.40148333  8944.1151     11253.421      25058.5221\n 16642.52676667 11293.44033333 26392.26029    10762.95515\n 14742.64339    27461.36785    24451.5077      3973.068\n  8778.44165     3180.5101     13985.61338333 11253.421\n  2902.9065     20745.9891     18365.517135   13831.1152\n  1977.815       8964.06055     3757.8448     14455.64405\n  9304.7019     14070.28941667 34303.1672      7726.854\n 14782.02        7684.1105      7526.70645     8781.2\n  6815.48695     3271.0605     15555.18875     9876.461\n  8850.46785     6435.32155    10065.413      13831.1152\n  6666.243      42837.7094      6570.4078     30592.27466667\n 10138.884725    6435.32155    13251.04205    11566.30055\n  6686.4313      8152.2755     24168.4007     12981.3457\n  5934.3798      8232.79713333 25659.702214    9853.7176\n  5002.7827      9304.7019      8277.42251667 16960.74255\n  1731.677       5934.3798      5608.17835     9432.9253\n 28742.4515075  17737.1315     11566.30055    22230.52336667\n 14084.4509     15492.48887    21978.6769     10689.55984333\n  9041.99726667  4225.36603333  7702.65515    25058.5221\n  6238.298       9162.7604     22144.032      15201.768655\n  8721.272      10122.5795      5608.17835     4827.90495\n 26466.0395     11345.519      18542.8595      3077.0955\n 12847.0397     10014.44043833 14070.28941667  9862.568465\n  2322.6218      3523.29585    24168.4007      5157.42395\n 22230.52336667 18542.8595      6192.7155      3077.0955\n 18655.65895     8900.23205714  5664.21906667 40941.2854\n  2497.0383      6840.1062      4830.63       14800.37808333\n 16939.097235   10520.95421667  6964.1039      7802.51325\n  4113.0251      8601.3293     11356.012      14366.6569\n  9541.69555     5157.42395     8944.1151      2136.88225\n  7442.99146667 14092.06011     4500.33925     9020.2613\n 28503.9874      8457.818      12407.7778     22230.52336667\n 10762.95515     1131.5066     37165.1638     15991.4607\n 28503.9874      6362.3398     28742.4515075  18767.7377\n  4412.8665      8439.86105667 17626.5970475  28503.9874\n 12656.36375     9364.57833333  9504.3103     37181.94436\n  8569.8618      5894.24218333 12981.3457     19741.47858333\n 29185.948025   38678.0768     22898.01475     9391.346\n 10965.88922     3078.1584      6495.61224667  4234.927\n 17121.4981     22327.4813      7698.009       8582.3023\n 11001.0455     17121.4981     10982.5013     17932.0375\n 26392.26029     3973.068      15756.075172   24123.82\n 14371.2411     12842.85566667  8748.40148333 18843.62190714\n  4553.1439     38746.3551     12119.64675     7727.2532\n 22965.2035     15498.05313333 18680.05670667  5233.37395\n 16939.097235   19437.81893    24097.9649     12051.6132\n  5339.17483333  7442.99146667 12668.98845429  7684.1105\n  1927.06445    14571.8908     25659.702214    3523.29585\n  4113.0251      6369.91805    26389.47376833 28742.4515075\n 11551.79775333  9862.568465   10689.55984333  8969.79926667]\n"}},"pos":43,"state":"done","type":"cell"}
{"cell_type":"code","id":"325534","input":"","pos":44,"type":"cell"}
{"cell_type":"code","id":"709c2d","input":"","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"0e932c","input":"pandas docs - https://pandas.pydata.org/docs/reference/index.html#api <br>\nseaborn docs - https://seaborn.pydata.org/api.html\n\n","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"313542","input":"### Creating and Fitting","metadata":{"id":"e1m-wKeYsFEl"},"pos":18,"type":"cell"}
{"cell_type":"markdown","id":"383ffe","input":"Read in your data into a pandas dataframe by replacing the `filename` variable with your file's path. You can also use the current code below to work on a mpg dataset, where the target variable we are predicting is **miles per gallon** based on other car features. \n\n> We should choose two columns that we want to run regresssion on. Use the `.head()` function to decide which columns would be best!\n\n","metadata":{"id":"m4-2ySg9W0Fw"},"pos":3,"type":"cell"}
{"cell_type":"markdown","id":"56f9a3","input":"# Repeat the process!\nTry running linear regression on multiple combinations of features (columns) on your dataset. What combination yields the best score? How does this connect to your correlation chart? ","metadata":{"id":"2OixzlOot-U6"},"pos":27,"type":"cell"}
{"cell_type":"markdown","id":"84c5f7","input":"### Creating Predictions\n\nPredict outputs on our x_test data that we held out. Think of this as a way to see how the model does on new data!\n\n","metadata":{"id":"QFb-_EiFrvzQ"},"pos":21,"type":"cell"}
{"cell_type":"markdown","id":"89f492","input":"# Data Loading, Cleaning, and Setup","metadata":{"id":"JlrQHpg8a-sI"},"pos":2,"type":"cell"}
{"cell_type":"markdown","id":"8cf984","input":"### Getting to know the problem\n\nFor my data, my columns inlude `'mpg', 'cylinders', 'displacement', 'horsepower', 'weight', 'acceleration', 'model_year', 'origin', and 'name'`. \n\nTo start, I would like to create a linear regression model that uses horsepower (X) to predict miles per gallon (y) and see how strong our linear regression model is. For your data, you should choose two columns as well to represent X and y.\n\n","metadata":{"id":"w78dUshNZarz"},"pos":10,"type":"cell"}
{"cell_type":"markdown","id":"a58180","input":"### Split the data\n\nOur model should ignore 20% of data points to use for testing so it doesn't just memorize the data. We need to make sure there are no missing data points before continuing.\n\n","metadata":{"id":"g5Zk8_6ksLur"},"pos":14,"type":"cell"}
{"cell_type":"markdown","id":"a765fc","input":"# Linear Regression with Scikit-learn's linear regression\n\nWe can use Scikit-Learn’s Linear Regression to fit the model. Most other models we will use in the course \n\nhttps://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html\n\n","metadata":{"id":"cbeaQMpna-sR"},"pos":13,"type":"cell"}
{"cell_type":"markdown","id":"abf33f","input":"### Results and Evaluation\nOne way to see if the model is pretty good is the coefficient of determination (R^2) using the `score()` function. You can read about it here: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression.score.\n\nAnother way is to compare our mean absolute error (MAE). MAE measures the prediction error. Mathematically, it is the average absolute difference between observed and predicted outcomes, MAE = mean(abs(observeds - predicteds)). MAE is less sensitive to outliers compared to RMSE.\n\nRead some more about regression model metrics [here](http://www.sthda.com/english/articles/38-regression-model-validation/158-regression-model-accuracy-metrics-r-square-aic-bic-cp-and-more/).","metadata":{"id":"14TdY4RGr-RG"},"pos":24,"type":"cell"}
{"cell_type":"markdown","id":"bcce68","input":"# Linear regression using SKLearn on your own Data!\nThis should look familiar... we now are going to use linear regression on some of our own features. I recommend walking through the code below first, then importing your dataset and working through the same problem with your data!","metadata":{"id":"K_X2fB9ta-rv"},"pos":0,"type":"cell"}
{"cell_type":"markdown","id":"dc0d40","input":"Linear regression naturally works best on highly correlated data, so I'm going to create a heatmap to see which variables are correlated! ","metadata":{"id":"J3L_hb0Ou4sn"},"pos":8,"type":"cell"}
{"cell_type":"markdown","id":"e60bba","input":"np docs - https://numpy.org/doc/stable/reference/index.html#reference","pos":15,"type":"cell"}
{"end":1658861058992,"exec_count":73,"id":"559e91","input":"from sklearn import tree\n\nclf_tree = tree.DecisionTreeRegressor()\nclf_tree = clf_tree.fit(x_train, y_train)","kernel":"python3-ubuntu","pos":42.5,"start":1658861058974,"state":"done","type":"cell"}
{"end":1658861096224,"exec_count":74,"id":"fab09a","input":"y_tree = clf_tree.predict(x_test)","kernel":"python3-ubuntu","pos":42.75,"start":1658861096206,"state":"done","type":"cell"}
{"id":0,"time":1658856975339,"type":"user"}
{"last_load":1658843084045,"type":"file"}