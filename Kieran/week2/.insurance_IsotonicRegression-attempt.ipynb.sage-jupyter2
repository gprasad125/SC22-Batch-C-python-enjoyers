{"backend_state":"running","connection_file":"/projects/200e8042-15d9-45b5-b665-c79cbc8761e9/.local/share/jupyter/runtime/kernel-e49a1466-0842-4e1e-a999-0240e19e7cb1.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","trust":true,"type":"settings"}
{"end":1659365663972,"exec_count":1,"id":"840404","input":"# import libraries \nimport numpy as np\nimport plotly.express as px\nimport pandas as pd\nimport statistics\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","kernel":"ds_env","pos":0,"start":1659365662619,"state":"done","type":"cell"}
{"end":1659365663994,"exec_count":2,"id":"a34a1e","input":"insurance = pd.read_csv('insurance.csv')","kernel":"ds_env","pos":1,"start":1659365663982,"state":"done","type":"cell"}
{"end":1659365673648,"exec_count":3,"id":"83a669","input":"def smokerToBinary(cond):\n    if cond == \"yes\":\n        return 1\n    elif cond == \"no\":\n        return 0\n\ninsurance[\"binary_smoker\"] = insurance[\"smoker\"].apply(smokerToBinary)","kernel":"ds_env","pos":2,"start":1659365673623,"state":"done","type":"cell"}
{"end":1659365675127,"exec_count":4,"id":"3a3034","input":"def sexToBinary(sex):\n    if sex == \"male\":\n        return 1\n    elif sex == \"female\":\n        return 0\n\ninsurance[\"binary_sex\"] = insurance[\"sex\"].apply(sexToBinary)","kernel":"ds_env","pos":3,"start":1659365675113,"state":"done","type":"cell"}
{"end":1659365684517,"exec_count":5,"id":"80a10b","input":"enc_region = pd.get_dummies(insurance[\"region\"])\ninsurance_cleaned = pd.concat((insurance, enc_region), axis=1)","kernel":"ds_env","pos":4,"start":1659365684504,"state":"done","type":"cell"}
{"end":1659365690114,"exec_count":6,"id":"a6f3a0","input":"insurance_cleaned.drop(\"smoker\", axis=1, inplace=True)\ninsurance_cleaned.drop(\"sex\", axis=1, inplace=True)\ninsurance_cleaned.drop(\"region\", axis=1, inplace=True)","kernel":"ds_env","pos":5,"start":1659365690092,"state":"done","type":"cell"}
{"end":1659365710421,"exec_count":7,"id":"ec6ae5","input":"insurance_cleaned.head(1)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>bmi</th>\n      <th>children</th>\n      <th>charges</th>\n      <th>binary_smoker</th>\n      <th>binary_sex</th>\n      <th>northeast</th>\n      <th>northwest</th>\n      <th>southeast</th>\n      <th>southwest</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19</td>\n      <td>27.9</td>\n      <td>0</td>\n      <td>16884.924</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   age   bmi  children    charges  binary_smoker  binary_sex  northeast  \\\n0   19  27.9         0  16884.924              1           0          0   \n\n   northwest  southeast  southwest  \n0          0          0          1  "},"exec_count":7}},"pos":6,"start":1659365710380,"state":"done","type":"cell"}
{"end":1659365747288,"exec_count":8,"id":"767471","input":"target = insurance_cleaned[\"charges\"]","kernel":"ds_env","pos":7,"start":1659365747279,"state":"done","type":"cell"}
{"end":1659365754422,"exec_count":9,"id":"b34965","input":"input_columns = insurance_cleaned.loc[:, insurance_cleaned.columns != \"charges\"]","kernel":"ds_env","pos":7.5,"start":1659365754408,"state":"done","type":"cell"}
{"end":1659366448185,"exec_count":10,"id":"075ea6","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.isotonic import IsotonicRegression","kernel":"ds_env","pos":8,"start":1659366446951,"state":"done","type":"cell"}
{"end":1659366457357,"exec_count":11,"id":"b1dd54","input":"x_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2)","kernel":"ds_env","pos":9,"start":1659366457338,"state":"done","type":"cell"}
{"exec_count":12,"id":"25cc1b","input":"","kernel":"ds_env","pos":10,"state":"done","type":"cell"}
{"exec_count":13,"id":"e4cd04","input":"","kernel":"ds_env","output":{"0":{"ename":"ValueError","evalue":"Isotonic regression input X should be a 1d array or 2d array with 1 feature","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [13]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43misoReg\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my_train\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/isotonic.py:348\u001b[0m, in \u001b[0;36mIsotonicRegression.fit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    344\u001b[0m check_consistent_length(X, y, sample_weight)\n\u001b[1;32m    346\u001b[0m \u001b[38;5;66;03m# Transform y by running the isotonic regression algorithm and\u001b[39;00m\n\u001b[1;32m    347\u001b[0m \u001b[38;5;66;03m# transform X accordingly.\u001b[39;00m\n\u001b[0;32m--> 348\u001b[0m X, y \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_build_y\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    350\u001b[0m \u001b[38;5;66;03m# It is necessary to store the non-redundant part of the training set\u001b[39;00m\n\u001b[1;32m    351\u001b[0m \u001b[38;5;66;03m# on the model to make it possible to support model persistence via\u001b[39;00m\n\u001b[1;32m    352\u001b[0m \u001b[38;5;66;03m# the pickle module as the object built by scipy.interp1d is not\u001b[39;00m\n\u001b[1;32m    353\u001b[0m \u001b[38;5;66;03m# picklable directly.\u001b[39;00m\n\u001b[1;32m    354\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mX_thresholds_, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39my_thresholds_ \u001b[38;5;241m=\u001b[39m X, y\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/isotonic.py:264\u001b[0m, in \u001b[0;36mIsotonicRegression._build_y\u001b[0;34m(self, X, y, sample_weight, trim_duplicates)\u001b[0m\n\u001b[1;32m    262\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m_build_y\u001b[39m(\u001b[38;5;28mself\u001b[39m, X, y, sample_weight, trim_duplicates\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m):\n\u001b[1;32m    263\u001b[0m     \u001b[38;5;124;03m\"\"\"Build the y_ IsotonicRegression.\"\"\"\u001b[39;00m\n\u001b[0;32m--> 264\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_check_input_data_shape\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    265\u001b[0m     X \u001b[38;5;241m=\u001b[39m X\u001b[38;5;241m.\u001b[39mreshape(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m)  \u001b[38;5;66;03m# use 1d view\u001b[39;00m\n\u001b[1;32m    267\u001b[0m     \u001b[38;5;66;03m# Determine increasing if auto-determination requested\u001b[39;00m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/isotonic.py:241\u001b[0m, in \u001b[0;36mIsotonicRegression._check_input_data_shape\u001b[0;34m(self, X)\u001b[0m\n\u001b[1;32m    236\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (X\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m \u001b[38;5;129;01mor\u001b[39;00m (X\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m2\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m X\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m1\u001b[39m] \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m)):\n\u001b[1;32m    237\u001b[0m     msg \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m    238\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIsotonic regression input X should be a 1d array or \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    239\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m2d array with 1 feature\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    240\u001b[0m     )\n\u001b[0;32m--> 241\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg)\n","\u001b[0;31mValueError\u001b[0m: Isotonic regression input X should be a 1d array or 2d array with 1 feature"]}},"pos":11,"state":"done","type":"cell"}
{"id":"1cf507","input":"# this model is not good, as it only takes one X value","pos":12,"type":"cell"}
{"id":0,"time":1659369367070,"type":"user"}
{"last_load":1659365636174,"type":"file"}